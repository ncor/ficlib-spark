// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.5.0
//   protoc               unknown
// source: auth/v1/auth.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Error } from "../../shared/v1/shared";

export const protobufPackage = "ficlib.auth.v1";

export interface TelegramLoginCallbackRequest {
  authDate: string;
  firstName: string;
  id: string;
  lastName: string;
  photoUrl: string;
  username: string;
  hash: string;
}

export interface TelegramLoginCallbackReply {
  sessionId?: string | null;
  error?: Error | null;
}

function createBaseTelegramLoginCallbackRequest(): TelegramLoginCallbackRequest {
  return { authDate: "", firstName: "", id: "", lastName: "", photoUrl: "", username: "", hash: "" };
}

export const TelegramLoginCallbackRequest: MessageFns<TelegramLoginCallbackRequest> = {
  encode(message: TelegramLoginCallbackRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.authDate !== "") {
      writer.uint32(10).string(message.authDate);
    }
    if (message.firstName !== "") {
      writer.uint32(18).string(message.firstName);
    }
    if (message.id !== "") {
      writer.uint32(26).string(message.id);
    }
    if (message.lastName !== "") {
      writer.uint32(34).string(message.lastName);
    }
    if (message.photoUrl !== "") {
      writer.uint32(42).string(message.photoUrl);
    }
    if (message.username !== "") {
      writer.uint32(50).string(message.username);
    }
    if (message.hash !== "") {
      writer.uint32(58).string(message.hash);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TelegramLoginCallbackRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTelegramLoginCallbackRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.authDate = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.firstName = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.lastName = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.photoUrl = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.username = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.hash = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TelegramLoginCallbackRequest {
    return {
      authDate: isSet(object.authDate) ? globalThis.String(object.authDate) : "",
      firstName: isSet(object.firstName) ? globalThis.String(object.firstName) : "",
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      lastName: isSet(object.lastName) ? globalThis.String(object.lastName) : "",
      photoUrl: isSet(object.photoUrl) ? globalThis.String(object.photoUrl) : "",
      username: isSet(object.username) ? globalThis.String(object.username) : "",
      hash: isSet(object.hash) ? globalThis.String(object.hash) : "",
    };
  },

  toJSON(message: TelegramLoginCallbackRequest): unknown {
    const obj: any = {};
    if (message.authDate !== "") {
      obj.authDate = message.authDate;
    }
    if (message.firstName !== "") {
      obj.firstName = message.firstName;
    }
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.lastName !== "") {
      obj.lastName = message.lastName;
    }
    if (message.photoUrl !== "") {
      obj.photoUrl = message.photoUrl;
    }
    if (message.username !== "") {
      obj.username = message.username;
    }
    if (message.hash !== "") {
      obj.hash = message.hash;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<TelegramLoginCallbackRequest>, I>>(base?: I): TelegramLoginCallbackRequest {
    return TelegramLoginCallbackRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<TelegramLoginCallbackRequest>, I>>(object: I): TelegramLoginCallbackRequest {
    const message = createBaseTelegramLoginCallbackRequest();
    message.authDate = object.authDate ?? "";
    message.firstName = object.firstName ?? "";
    message.id = object.id ?? "";
    message.lastName = object.lastName ?? "";
    message.photoUrl = object.photoUrl ?? "";
    message.username = object.username ?? "";
    message.hash = object.hash ?? "";
    return message;
  },
};

function createBaseTelegramLoginCallbackReply(): TelegramLoginCallbackReply {
  return { sessionId: null, error: null };
}

export const TelegramLoginCallbackReply: MessageFns<TelegramLoginCallbackReply> = {
  encode(message: TelegramLoginCallbackReply, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.sessionId !== undefined && message.sessionId !== null) {
      writer.uint32(10).string(message.sessionId);
    }
    if (message.error !== undefined && message.error !== null) {
      Error.encode(message.error, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TelegramLoginCallbackReply {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTelegramLoginCallbackReply();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.sessionId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.error = Error.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TelegramLoginCallbackReply {
    return {
      sessionId: isSet(object.sessionId) ? globalThis.String(object.sessionId) : null,
      error: isSet(object.error) ? Error.fromJSON(object.error) : null,
    };
  },

  toJSON(message: TelegramLoginCallbackReply): unknown {
    const obj: any = {};
    if (message.sessionId !== undefined && message.sessionId !== null) {
      obj.sessionId = message.sessionId;
    }
    if (message.error !== undefined && message.error !== null) {
      obj.error = Error.toJSON(message.error);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<TelegramLoginCallbackReply>, I>>(base?: I): TelegramLoginCallbackReply {
    return TelegramLoginCallbackReply.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<TelegramLoginCallbackReply>, I>>(object: I): TelegramLoginCallbackReply {
    const message = createBaseTelegramLoginCallbackReply();
    message.sessionId = object.sessionId ?? undefined;
    message.error = (object.error !== undefined && object.error !== null) ? Error.fromPartial(object.error) : undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
